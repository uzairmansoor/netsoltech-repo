AWSTemplateFormatVersion: "2010-09-09"
Description: Driver template to deploy the vpc, security groups, load balancer, cloudfront distribution, iam roles, lambda function, s3 bucket, ssmParameter, cloudwatch rules, rds, and auto scaling Group
Parameters:
  project:
    Type: String
    Default: netsoltech
    Description:  Project Name
  env:
    Type: String
    Default: prod
    AllowedValues: [prod, dev, qa, stage]
    Description:  Environment Name
  app:
    Type: String
    Default: app
    Description: Name of the app
  s3ArtifactPath:
    Type: String
    Default: "https://netsoltech-prod-us-east-1-339713058918.s3.amazonaws.com/code/cfn/services"
    Description: "Artifact bucket path"

Resources:
  vpc:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/vpc/vpc-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        vpcCidr: 10.50.0.0/16
        publicSubnet1Cidr: 10.50.1.0/24
        publicSubnet2Cidr: 10.50.2.0/24
        privateSubnet1Cidr: 10.50.3.0/24
        privateSubnet2Cidr: 10.50.4.0/24
        protectedSubnet1Cidr: 10.50.36.0/24
        protectedSubnet2Cidr: 10.50.37.0/24
        vpcDestinationCidrBlockPublicRoute: 0.0.0.0/0
        vpcDestinationCidrBlockPrivateRoute: 0.0.0.0/0
        vpcDestinationCidrBlockProtectedRoute: 0.0.0.0/0
        vpcNaclPublicInboundCidr: 0.0.0.0/0
        vpcNaclPublicOutboundCidr: 0.0.0.0/0
        vpcNaclPrivateInboundCidr: 0.0.0.0/0
        vpcNaclPrivateOutboundCidr: 0.0.0.0/0
        vpcNaclProtectedInboundCidr: 10.50.0.0/16
        vpcNaclProtectedOutboundCidr: 0.0.0.0/0
        publicIPActive: True
        vpcDnsEnabled: True
        vpcDnsSupport: True

  securityGroup:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - vpc
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/securitygroup/securitygroup-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        vpcId: !GetAtt vpc.Outputs.vpcId
        sgInternetTrafficIngressCidr: 0.0.0.0/0
        sgInternetTrafficEgressCidr: 0.0.0.0/0
        sgSshPort: 22
        sgHttpsPort: 443
        sgHttpPort: 80
        sgRdsPort: 3306
        sgNuxtWebAppPort: 3000
        sgAllowAllEgressProtocol: -1
        netsolCidrIp: 0.0.0.0/0
  
  ec2InstanceConnectEndpoint:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - vpc
      - securityGroup
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/ec2/ec2Endpoint-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        ec2EndpointClientToken: !Sub ${env}-ec2InstanceConnectEndpoint # A unique, case-sensitive identifier to guarantee the idempotency of the request
        ec2EndpointPreserveClientIp: True
        ec2EndpointSg: !GetAtt securityGroup.Outputs.sgEc2ConnectEndpoint
        ec2EndpointSubnetId: !GetAtt vpc.Outputs.privateSubnet1
  
  s3CfAccessLogBucket:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/s3/s3-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        s3BucketName: !Sub "${project}-${env}-${app}-cflogs-${AWS::Region}-${AWS::AccountId}"
        s3BucketAccessControl: Private
        s3VersioningStatus: Enabled
        s3ObjectOwnership: BucketOwnerPreferred
        sseAlgorithm: AES256
        indexDocument: index.html
        errorDocument: error.html
        enableWebsiteConfiguration: yes
        enableCfWritePolicy: yes
        enableAlbBucketPolicy: no
  
  s3AlbAccessLogBucket:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/s3/s3-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        s3BucketName: !Sub "${project}-${env}-${app}-alb-logs-${AWS::Region}-${AWS::AccountId}"
        s3BucketAccessControl: Private
        s3VersioningStatus: Enabled
        s3ObjectOwnership: BucketOwnerPreferred
        sseAlgorithm: AES256
        indexDocument: index.html
        errorDocument: error.html
        enableWebsiteConfiguration: no
        enableCfWritePolicy: no
        enableAlbBucketPolicy: yes
  
  loadBalancer:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - vpc
      - securityGroup
      - s3AlbAccessLogBucket
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/loadbalancer/lb-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        lbHttpPort: 80
        lbHttpsPort: 443
        lbNuxtWebAppPort: 3000
        appCode: 200-499
        statusCode: HTTP_301
        vpcId: !GetAtt vpc.Outputs.vpcId
        lbActionType: forward
        lbTargetType: instance
        lbSubnetIdA: !GetAtt vpc.Outputs.publicSubnet1
        lbSecurityGroup: !GetAtt securityGroup.Outputs.sgPublicAlb
        lbSubnetIdB: !GetAtt vpc.Outputs.publicSubnet2
        loadBalancerName: !Sub "${project}-${env}-${app}-alb"
        loadBalancerScheme: internet-facing
        healthCheckIntervalSeconds: 30
        healthCheckTimeoutSeconds: 15
        healthyThresholdCount: 5
        unHealthyThresholdCount: 3
        ipAddressType: ipv4
        loadBalancerMethod: round_robin
        acmCertificateIdentifier: 338e8fbe-c055-4661-9fc4-4c57fa616782
        loadBalancerType: application
        lbHttpsListenerSslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
        lbHttpsProtocol: HTTPS
        lbHttpProtocol: HTTP
        enableAccessLogs: true
        s3BucketNameForAccessLogs: !GetAtt s3AlbAccessLogBucket.Outputs.s3Bucket
        prefixOfS3BucketForAccessLogs: !Sub "${env}AlbAccessLogs"

  ssmParameterStore:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/ssm/ssmParameterStore/ssmParameterStore-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        amiId: ami-0d487b9383f885c8e

  iamRoles:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - ssmParameterStore
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/iamRoles/iamRoles-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        instanceIdsParamStoreName: !GetAtt ssmParameterStore.Outputs.instanceIdsParamStoreName
        dbName: !Sub "${project}-${env}-${app}-db-${AWS::Region}"
        asgName: !Sub "${project}-${env}-${app}-AutoScalingGroup"
        amiIdParamStoreName: !GetAtt ssmParameterStore.Outputs.amiIdParamStoreName

  ec2Autoscaling:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - vpc
      - securityGroup
      - loadBalancer
      - iamRoles
      - ssmParameterStore
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/autoscaling/autoscaling-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        launchTemplateEc2ImageId: !GetAtt ssmParameterStore.Outputs.amiIdParamStoreValue
        ec2InstanceType: t3.large
        keyPairName: !Sub "${project}-${env}-${app}-${AWS::Region}-${AWS::AccountId}"
        launchTemplateName: !Sub "${project}-${env}-${app}-LaunchTemplatetestASG"
        autoScalingGroupName: !Sub "${project}-${env}-${app}-AutoScalingGroup"
        privateSubnet1Id: !GetAtt vpc.Outputs.privateSubnet1
        privateSubnet2Id: !GetAtt vpc.Outputs.privateSubnet2
        autoScalingDesiredCapacity: 1
        autoScalingMaxSize: 2
        autoScalingMinSize: 1
        sgEc2Web: !GetAtt securityGroup.Outputs.sgEc2Web
        ebsVolumeSize: 30
        ebsVolumeType: gp3
        targetGroupArn: !GetAtt loadBalancer.Outputs.lbTargetGroupArn
        ec2InstanceProfileName: !GetAtt iamRoles.Outputs.ec2InstanceProfileName
        lifecycleHookDefaultResult: CONTINUE
        asgLifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
        lifecycleHeartbeatTimeout: 30
        stepScalingAdjustmentType: ChangeInCapacity
        stepScalingMetricAggregationType: Average
        asgPolicyType: StepScaling
        cpuScaleInMetricIntervalUpperBound: 0
        cpuScaleInAdjustment: -1
        cpuScaleOutMetricIntervalLowerBound: 0
        cpuScaleOutAdjustment: 1
        freeMemScaleInMetricIntervalLowerBound: 0
        freeMemScaleInAdjustment: -1
        freeMemScaleOutMetricIntervalUpperBound: 0
        freeMemScaleOutAdjustment: 1
        detailedMonitoring: true
        memUtilSSMParamStoreName: !GetAtt ssmParameterStore.Outputs.memUtilSSMParamStoreName
        diskUtilSSMParamStoreName: !GetAtt ssmParameterStore.Outputs.diskUtilSSMParamStoreName
        ssmAssociationName: !Sub "${project}-${env}-${app}-freeMem-${AWS::Region}"
        regionName: us-east-1

  cloudFrontDistribution:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - loadBalancer
      - s3CfAccessLogBucket
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/cloudfront/cloudfront-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        cfDistributionStatus: true
        defaultTTL: 86400
        maxTTL: 259300
        minTTL: 86400
        targetDns: !GetAtt loadBalancer.Outputs.lbDnsName
        targetOriginId: !Sub "${env}LoadBalancerOrigin"
        viewerProtocolPolicy: redirect-to-https
        originProtocolPolicy: https-only
        acmCertificateIdentifier: 338e8fbe-c055-4661-9fc4-4c57fa616782
        cfHttpsPort: 443
        cfOriginSSLProtocols: TLSv1.2
        cfAlias: !Sub "netsoltech.com"
        cfOriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
        cfResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
        cfHttpVersion: http2
        cfPriceClass: PriceClass_All
        acmCertificateProtocolVersion: TLSv1.2_2021
        acmCertificateSslSupportMethod: sni-only
        cfCachePolicyConfigComment: TTL for cache in cloudfront with ALB as an origin
        cfCachePolicyConfigName: !Sub "${project}-${env}-${app}-cfCachePolicyWithAlbOrigin"
        cfCachePolicyCookieBehavior: all
        cfCachePolicyHeaderBehavior: whitelist
        s3CfAccessLogBucketDomainName: !GetAtt s3CfAccessLogBucket.Outputs.s3BucketDomainName
        accessLogCookies: true
        accessLogPrefix: cloudFrontAccessLogs/
        cfDistComment: !Sub ${env} cloudfront distribution
        isEnableCfLogging: yes
        cfCacheDisablePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
        cfEnableCacheRequestPolicy: no
        enableAlias: yes
  
  updateInstanceIdLambdaFunc:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - iamRoles
      - ec2Autoscaling
      - snsTopicForCwAlarms
      - ssmParameterStore
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/lambdaFunction/lambdaFunction-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        lambdaFunctionName: !Sub "${project}-${env}-${app}-updateInstanceId-${AWS::Region}"
        runtimeVersion: python3.12
        lambdaHandler: updateInstanceId.lambda_handler
        timeout: 30
        lambdaExecutionRoleArn: !GetAtt iamRoles.Outputs.lambdaRoleForUpdateInstanceIdFunctionArn
        s3BucketName: !Sub "${project}-${env}-${AWS::Region}-${AWS::AccountId}"
        s3Key: code/lambda/updateInstanceId/updateInstanceId.zip
        launchTemplateName: !Sub "${project}-${env}-${app}-LaunchTemplatetestASG"
        instanceIdsParamStore: !Sub "${project}-${env}-${app}-instanceIdParamStore-${AWS::Region}"
        asgName: !Sub "${project}-${env}-${app}-AutoScalingGroup"
        scaleInPolicyName: !Sub "${project}-${env}-${app}-cpuScaleInStepScalingPolicy"
        snsTopicArn: !GetAtt snsTopicForCwAlarms.Outputs.snsTopicArn
        amiIdParamStoreName: !GetAtt ssmParameterStore.Outputs.amiIdParamStoreName
  
  createAmiLambdaFunc:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - iamRoles
      - ec2Autoscaling
      - snsTopicForCwAlarms
      - ssmParameterStore
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/lambdaFunction/lambdaFunction-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        lambdaFunctionName: !Sub "${project}-${env}-${app}-createAmi-${AWS::Region}"
        runtimeVersion: python3.10
        lambdaHandler: createAmi.lambda_handler
        timeout: 30
        lambdaExecutionRoleArn: !GetAtt iamRoles.Outputs.lambdaRoleForCreateAmiFunctionArn
        s3BucketName: !Sub "${project}-${env}-${AWS::Region}-${AWS::AccountId}"
        s3Key: code/lambda/createAmi/createAmi.zip
        launchTemplateName: !Sub "${project}-${env}-${app}-LaunchTemplatetestASG"
        instanceIdsParamStore: !Sub "${project}-${env}-${app}-instanceIdParamStore-${AWS::Region}"
        asgName: !Sub "${project}-${env}-${app}-AutoScalingGroup"
        scaleInPolicyName: !Sub "${project}-${env}-${app}-cpuScaleInStepScalingPolicy"
        snsTopicArn: !GetAtt snsTopicForCwAlarms.Outputs.snsTopicArn
        amiIdParamStoreName: !GetAtt ssmParameterStore.Outputs.amiIdParamStoreName
  
  updateAsgLaunchTemplateLambdaFunc:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - iamRoles
      - ec2Autoscaling
      - snsTopicForCwAlarms
      - ssmParameterStore
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/lambdaFunction/lambdaFunction-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        lambdaFunctionName: !Sub "${project}-${env}-${app}-updateAsgLaunchTemplate-${AWS::Region}"
        runtimeVersion: python3.12
        lambdaHandler: updateAsgLaunchTemplate.lambda_handler
        timeout: 30
        lambdaExecutionRoleArn: !GetAtt iamRoles.Outputs.lambdaRoleForAsgLaunchTemplateArn
        s3BucketName: !Sub "${project}-${env}-${AWS::Region}-${AWS::AccountId}"
        s3Key: code/lambda/updateAsgLaunchTemplate/updateAsgLaunchTemplate.zip
        launchTemplateName: !Sub "${project}-${env}-${app}-LaunchTemplatetestASG"
        instanceIdsParamStore: !Sub "${project}-${env}-${app}-instanceIdParamStore-${AWS::Region}"
        asgName: !Sub "${project}-${env}-${app}-AutoScalingGroup"
        scaleInPolicyName: !Sub "${project}-${env}-${app}-cpuScaleInStepScalingPolicy"
        snsTopicArn: !GetAtt snsTopicForCwAlarms.Outputs.snsTopicArn
        amiIdParamStoreName: !GetAtt ssmParameterStore.Outputs.amiIdParamStoreName
  
  cloudwatchEventRules:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - updateInstanceIdLambdaFunc
      - updateAsgLaunchTemplateLambdaFunc
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/cw/eventRules/cloudWatchEventRules-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        autoScalingGroupName: !Sub "${project}-${env}-${app}-AutoScalingGroup"
        updateInstanceIdLambdaFunctionArn: !GetAtt updateInstanceIdLambdaFunc.Outputs.lambdaFunctionArn
        updateInstanceIdCWEventRuleState: ENABLED
        eventPatternSource: aws.autoscaling
        eventPatternDetailType: EC2 Instance-launch Lifecycle Action
        ec2EventPatternSource: aws.ec2
        amiStateChangeDetailType: EC2 AMI State Change
        amiState: available
        ec2AmiStateChangeCwEventRuleState: ENABLED
        asgLaunchTemplateLambdaFunctionArn: !GetAtt updateAsgLaunchTemplateLambdaFunc.Outputs.lambdaFunctionArn
        cwStartEventRuleState: ENABLED
        cwStopEventRuleState: ENABLED
        updateInstanceIdCwEventRuleName: !Sub '${project}-${env}-eventRuleTriggerUpdateInstanceId-${AWS::Region}'
        ec2AmiStateChangeCwEventRuleName: !Sub '${project}-${env}-ec2AmiStateChangeCwEventRule-${AWS::Region}'

  snsTopicForCwAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/sns/snsTopic/snsTopic-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        snsTopicName: !Sub "${project}-${env}-${app}-cwAlarmNotification-${AWS::Region}"
        snsDisplayName: !Sub "${project}-${env}-${app}-cwAlarmNotification-${AWS::Region}"

  snsSubscrip1ForCwAlarms:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - snsTopicForCwAlarms
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/sns/snsSubscription/snsSubscription-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        endpoint: uzair.mansoor@netsoltech.com
        protocol: email
        snsTopicArn: !GetAtt snsTopicForCwAlarms.Outputs.snsTopicArn
        snsSubscripExportName: snsSubscrip1ForCwAlarms

  ec2CustomAlarms:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - snsTopicForCwAlarms
      - ec2Autoscaling
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/cw/alarms/ec2CustomAlarm-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        lowEc2DiskUtilizationAlarmName: lowEc2DiskUtilizationAlarm
        mediumEc2DiskUtilizationAlarmName: mediumEc2DiskUtilizationAlarm
        highEc2DiskUtilizationAlarmName: highEc2DiskUtilizationAlarm
        diskUtilizationMetricName: DiskUtilization
        customMetricsNamespace: CWAgent
        diskUtilizationStatistic: Maximum
        ec2StatisticPeriod: 300
        ec2EvaluationPeriod: 3
        lowDiskUtilizationThresholdValue: 70
        mediumDiskUtilizationThresholdValue: 80 
        highDiskUtilizationThresholdValue: 90
        snsTopicArn: !GetAtt snsTopicForCwAlarms.Outputs.snsTopicArn
        freeMemoryStatisticPeriod: 60
        freeMemoryMetricName: !Sub "${env}_free_mem_ec2"
        highfreeMemoryThresholdValue: 10
        cloudWebCustomMetricsNamespace: Custom-CloudWeb-Metrics
        freeMemoryEvaluationPeriod: 3
        highEc2FreeMemoryAlarmName: highEc2FreeMemoryAlarm
        freeMemoryStatistic: Maximum
        lowEc2FreeMemoryAlarmName: lowEc2FreeMemoryAlarm
        lowfreeMemoryThresholdValue: 30
        mediumfreeMemoryThresholdValue: 20
        highfreeMemoryThresholdValue: 10
        ec2FreeMemScaleInThresholdValue: 70
        asgName: !Sub "${project}-${env}-${app}-AutoScalingGroup"
        deviceName: xvda1
        fileSystemType: ext4
        mediumEc2FreeMemoryAlarmName: mediumEc2FreeMemoryAlarm

  asgCloudWatchAlarm:
    Type: AWS::CloudFormation::Stack 
    DependsOn:
      - snsTopicForCwAlarms
      - ec2Autoscaling
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/cw/alarms/asgAlarm-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        lowCpuAlarmName: !Sub "${project}-${env}-${app}-asgLowCpuAlarm-${AWS::Region}"
        mediumCpuAlarmName: !Sub "${project}-${env}-${app}-asgMediumCpuAlarm-${AWS::Region}"
        highCpuAlarmName: !Sub "${project}-${env}-${app}-asgHighCpuAlarm-${AWS::Region}"
        asgCpuScaleInAlarmName: cpuScaleInAlarm
        asgNamespace: AWS/EC2
        cpuMetricName: CPUUtilization
        asgCpuStatistic: Average
        cpuMetricUnit: Percent
        lowCpuThresholdValue: 70
        mediumCpuThresholdValue: 80
        highCpuThresholdValue: 90
        scaleInCpuThresholdValue: 50      
        asgNetworkOutTrafficAlarmName: !Sub "${project}-${env}-${app}-asgNetworkOutTrafficAlarm-${AWS::Region}"
        asgNetworkInTrafficAlarmName: !Sub "${project}-${env}-${app}-asgNetworkInTrafficAlarm-${AWS::Region}"
        asgNetworkInMetricName: NetworkIn
        asgNetworkOutMetricName: NetworkOut
        asgNetworkThresholdValue: 500586437
        asgNetworkMetricUnit: Bytes
        asgNetworkStatistic: Average
        systemStatusCheckMetricName: StatusCheckFailed
        statusCheckMetricName: StatusCheckFailed_Instance
        systemStatusCheckEc2AlarmName: !Sub "${project}-${env}-${app}-systemStatusCheckEc2Alarm-${AWS::Region}"
        statusCheckEc2AlarmName: !Sub "${project}-${env}-${app}-statusCheckEc2Alarm-${AWS::Region}"
        statusCheckStatistic: Sum
        statusCheckThresholdValue: 1
        statusCheckMetricUnit: Count
        snsTopicArn: !GetAtt snsTopicForCwAlarms.Outputs.snsTopicArn
        asgName: !Sub "${project}-${env}-${app}-AutoScalingGroup"
        asgStatisticPeriod: 60
        asgEvaluationPeriod: 3
        asgNetworkInStatisticPeriod: 900
        cpuScaleInStepScalingPolicyArn: !GetAtt ec2Autoscaling.Outputs.cpuScaleInStepScalingPolicyArn
        cpuScaleOutStepScalingPolicyArn: !GetAtt ec2Autoscaling.Outputs.cpuScaleOutStepScalingPolicyArn 

  albCloudWatchAlarm:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - snsTopicForCwAlarms
      - loadBalancer
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/cw/alarms/albAlarm-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        alb4xxErrorsMetricName: HTTPCode_Target_4XX_Count
        albUnhealthyHostMetricName: UnHealthyHostCount
        alb5xxErrorsMetricName: HTTPCode_Target_5XX_Count
        alb4xxErrorsAlarmName: !Sub "${project}-${env}-${app}-alb4xxErrorsAlarm-${AWS::Region}"
        alb5xxErrorsAlarmName: !Sub "${project}-${env}-${app}-alb5xxErrorsAlarm-${AWS::Region}"
        albUnhealthyHostAlarmName: !Sub "${project}-${env}-${app}-albUnhealthyHost-${AWS::Region}"
        albErrorsStatistic: Sum
        albMetricUnit: Count
        albThresholdValue: 0
        albUnhealthyHostStatistic: Minimum
        albNamespace: AWS/ApplicationELB
        snsTopicArn: !GetAtt snsTopicForCwAlarms.Outputs.snsTopicArn
        loadBalancerName: !GetAtt loadBalancer.Outputs.lbFullName
        targetGroupName: !GetAtt loadBalancer.Outputs.lbTargetGroupFullName
        albStatisticPeriod: 30
        albEvaluationPeriods: 3
        alb4xxErrorsStatisticPeriod: 900
        alb4xxErrorsEvaluationPeriods: 20
        alb4xxErrorsThresholdValue: 80
  
  cloudfrontCloudWatchAlarm:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - snsTopicForCwAlarms
      - cloudFrontDistribution
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/cw/alarms/cloudFrontAlarm-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        region: Global
        cloudfrontAlarmName: cfTotalErrorRateAlarm
        snsTopicArn: !GetAtt snsTopicForCwAlarms.Outputs.snsTopicArn
        cloudfrontDistributionId: !GetAtt cloudFrontDistribution.Outputs.cloudFrontDistributionId
        cloudfrontMetricName: TotalErrorRate
        cloudfrontNamespace: AWS/CloudFront
        cloudfrontStatistic: Average
        cloudfrontStatisticPeriod: 900
        cloudfrontEvaluationperiods: 20
        cloudfrontMetricUnit: Percent
        cloudfrontTotalErrorRateThreshold: 80
        region: Global
  
  ec2Backup:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - iamRoles
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/backup/backup-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        newBackupVault: true
        backupVaultName: ec2
        backupPlanName: ec2backup
        backupSelectionName: ec2
        backupPolicy: BackupOnceDaily
        backupIamRoleArn: !GetAtt iamRoles.Outputs.backupIamRoleArn
        backupDeleteAfterDays: 7
        backupTargetRegion: us-west-1
        backukScheduleExpression: cron(0 15 ? * * *)
        backupStartWindowMinutes: 60
        backupCompletionWindowMinutes: 120
        awsResource: ec2Instance

Outputs:
  vpcId:
    Value: !Ref vpc
    Export:
      Name: !Sub "${project}-${env}-${app}-vpcStack-${AWS::Region}"
  securityGroup:
    Value: !Ref securityGroup
    Export:
      Name: !Sub "${project}-${env}-${app}-securityGroupStack-${AWS::Region}"
  loadBalancer:
    Value: !Ref loadBalancer
    Export:
      Name: !Sub "${project}-${env}-${app}-loadBalancerStack-${AWS::Region}"
  s3CfAccessLogBucket:
    Value: !Ref s3CfAccessLogBucket
    Export:
      Name: !Sub "${project}-${env}-${app}-s3CfAccessLogBucketStack-${AWS::Region}"
  iamRoles:
    Value: !Ref iamRoles
    Export:
      Name: !Sub "${project}-${env}-${app}-iamRolesStack-${AWS::Region}"
  ec2Autoscaling:
    Value: !Ref ec2Autoscaling
    Export:
      Name: !Sub "${project}-${env}-${app}-ec2AutoscalingStack-${AWS::Region}"
  cloudFrontDistribution:
    Value: !Ref cloudFrontDistribution
    Export:
      Name: !Sub "${project}-${env}-${app}-cloudFrontDistributionStack-${AWS::Region}"
  ssmParameterStore:
    Value: !Ref ssmParameterStore
    Export:
      Name: !Sub "${project}-${env}-${app}-ssmParameterStoreStack-${AWS::Region}"
  updateInstanceIdLambdaFunc:
    Value: !Ref updateInstanceIdLambdaFunc
    Export:
      Name: !Sub '${project}-${env}-updateInstanceIdLambdaFuncStack-${AWS::Region}' 
  createAmiLambdaFunc:
    Value: !Ref createAmiLambdaFunc
    Export:
      Name: !Sub '${project}-${env}-createAmiLambdaFuncStack-${AWS::Region}'  
  updateAsgLaunchTemplateLambdaFunc:
    Value: !Ref updateAsgLaunchTemplateLambdaFunc
    Export:
      Name: !Sub '${project}-${env}-updateAsgLaunchTemplateLambdaFuncStack-${AWS::Region}'
  cloudWatchEventRules:
    Value: !Ref cloudwatchEventRules
    Export:
      Name: !Sub "${project}-${env}-${app}-cloudWatchEventRulesStack-${AWS::Region}"
  snsTopicForCwAlarms:
    Value: !Ref snsTopicForCwAlarms
    Export:
      Name: !Sub "${project}-${env}-${app}-snsTopicForCwAlarmsStack-${AWS::Region}"
  snsSubscrip1ForCwAlarms:
    Value: !Ref snsSubscrip1ForCwAlarms
    Export:
      Name: !Sub "${project}-${env}-${app}-snsSubscrip1ForCwAlarmsStack-${AWS::Region}"
  ec2CustomAlarms:
    Value: !Ref ec2CustomAlarms
    Export:
      Name: !Sub "${project}-${env}-${app}-ec2CustomAlarmsStack-${AWS::Region}"  
  asgCloudWatchAlarm:
    Value: !Ref asgCloudWatchAlarm
    Export:
      Name: !Sub "${project}-${env}-${app}-asgCloudWatchAlarmStack-${AWS::Region}"
  albCloudWatchAlarm:
    Value: !Ref albCloudWatchAlarm
    Export:
      Name: !Sub "${project}-${env}-${app}-albCloudWatchAlarmStack-${AWS::Region}"
  cloudfrontCloudWatchAlarm:
    Value: !Ref cloudfrontCloudWatchAlarm
    Export:
      Name: !Sub "${project}-${env}-${app}-cloudfrontCloudWatchAlarmStack-${AWS::Region}"
  ec2Backup:
    Value: !Ref ec2Backup
    Export:
      Name: !Sub "${project}-${env}-${app}-ec2BackupStack-${AWS::Region}"