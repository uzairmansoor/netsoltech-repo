AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy cloudwatch events rule

Parameters:
  project:
    Type: String
    Default: netsoltech
    Description: Project name
  env:
    Type: String
    Default: stage
    AllowedValues: [prod, dev, qa, stage]
    Description: Environment name
  app:
    Type: String
    Default: app
    Description: Name of the app
  autoScalingGroupName:
    Type: String
    Description: Name of the Auto scaling group
  updateInstanceIdLambdaFunctionArn:
    Type: String
    Description: ARN of target update instance id lambda function
  updateInstanceIdCWEventRuleState:
    Type: String
    Default: ENABLED
    AllowedValues: [ENABLED, DISABLED]
    Description: State of custom cloudwatch alarms event rule
  eventPatternSource:
    Type: String
    Description: Source type of cloudwatch event rule 
  eventPatternDetailType:
    Type: String
    Description: Type of action on which you want to trigger lambda function
  ec2EventPatternSource:
    Type: String
    Description: EC2 as a source of cloudwatch event rule
  amiStateChangeDetailType:
    Type: String
    Description: Type of action on which you want to trigger lambda function
  amiState:
    Type: String
    AllowedValues: [available, failed, deregistered]
    Default: available
    Description: State of AMI on which you want to trigger lambda function
  ec2AmiStateChangeCwEventRuleState:
    Type: String
    Default: ENABLED
    AllowedValues: [ENABLED, DISABLED]
    Description: State of EC2 AMI state change cloudwatch event rule
  asgLaunchTemplateLambdaFunctionArn:
    Type: String
    Description: ARN of update launch template lambda function
  # triggerScaleInAsgLambdaFuncName:
  #   Type: String
  #   Description: Name of trigger scale in autoscaling group lambda function
  # snsTopicForTriggerScaleInAsgLambdaFuncArn:
  #   Type: String
  #   Description: Arn of sns topic which triggers trigger scale in autoscaling group lambda function
  # # startScheduleExpression:
  #   Type: String
  #   Description: The start scheduling expression of RDS
  # stopScheduleExpression:
  #   Type: String
  #   Description: The stop scheduling expression of RDS
  # startAction:
  #   Type: String
  #   Default: start
  #   Description: Start action of DB instance
  # stopAction:
  #   Type: String
  #   Default: stop
  #   Description: Stop action of DB instance
  cwStartEventRuleState:
    Type: String
    AllowedValues: [ENABLED, DISABLED]
    Description: The state of the start event rule
  cwStopEventRuleState:
    Type: String
    AllowedValues: [ENABLED, DISABLED]
    Description: The state of the stop event rule
  # rdsStartStopLambdaFunctionArn:
  #   Type: String
  #   Description: ARN of lambda function
  # ec2StartStopLambdaFunctionArn:
  #   Type: String
  #   Description: ARN of lambda function
  updateInstanceIdCwEventRuleName:
    Type: String
    Description: Name of update Instance Id cloudwatch event rule
  ec2AmiStateChangeCwEventRuleName:
    Type: String
    Description: Name of EC2 AMI state change cloudwatch event rule

# Conditions:
#   isEventRuleForRdsAndEc2: !Or 
#     - !Equals [ !Ref env, "dev" ]
#     - !Equals [ !Ref env, "stag" ]
#   isLambdaPermissionForRdsAndEc2: !Or
#     - !Equals [ !Ref env, "dev" ]
#     - !Equals [ !Ref env, "stag" ]

Resources:
  # cwStartEventRule:
  #   Type: AWS::Events::Rule
  #   Condition: isEventRuleForRdsAndEc2
  #   Properties:
  #     Description: CloudWatch event rule to start EC2 and RDS
  #     ScheduleExpression: !Ref startScheduleExpression
  #     State: !Ref cwStartEventRuleState
  #     Targets:
  #       - Arn: !Ref rdsStartStopLambdaFunctionArn
  #         Input: !Sub '{"action": "${startAction}"}'
  #         Id: 'startRdsRule'
  #       - Arn: !Ref ec2StartStopLambdaFunctionArn
  #         Input: !Sub '{"action": "${startAction}"}'
  #         Id: 'startEc2Rule' 
  
  # cwStopEventRule:
  #   Type: AWS::Events::Rule
  #   Condition: isEventRuleForRdsAndEc2
  #   Properties:
  #     Description: CloudWatch event rule to stop EC2 and RDS
  #     ScheduleExpression: !Ref stopScheduleExpression
  #     State: !Ref cwStopEventRuleState
  #     Targets:  
  #       - Arn: !Ref rdsStartStopLambdaFunctionArn
  #         Input: !Sub '{"action": "${stopAction}"}'
  #         Id: 'stopRdsRule'
  #       - Arn: !Ref ec2StartStopLambdaFunctionArn
  #         Input: !Sub '{"action": "${stopAction}"}'
  #         Id: 'stopEc2Rule'

  updateInstanceIdCwEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: CloudWatch event rule to trigger custom cloudwatch alarm's lambda function
      Name: !Ref updateInstanceIdCwEventRuleName
      EventPattern:
        source:
          - !Ref eventPatternSource
        detail-type:
          - !Ref eventPatternDetailType
        detail:
          AutoScalingGroupName:
            - !Ref autoScalingGroupName
      State: !Ref updateInstanceIdCWEventRuleState
      Targets:
        - Id: lambdaFuctionToUpdateCustomCloudWatchAlarms
          Arn: !Ref updateInstanceIdLambdaFunctionArn
                 
  # cwEventRuleLambdaPermissionToStartRds:
  #   Type: AWS::Lambda::Permission
  #   Condition: isLambdaPermissionForRdsAndEc2
  #   Properties:
  #     FunctionName: !Ref rdsStartStopLambdaFunctionArn
  #     Action: 'lambda:InvokeFunction'
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt cwStartEventRule.Arn
  
  # cwEventRuleLambdaPermissionToStopRds:
  #   Type: AWS::Lambda::Permission
  #   Condition: isLambdaPermissionForRdsAndEc2
  #   Properties:
  #     FunctionName: !Ref rdsStartStopLambdaFunctionArn
  #     Action: 'lambda:InvokeFunction'
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt cwStopEventRule.Arn
  
  # cwEventRuleLambdaPermissionToStartEc2:
  #   Type: AWS::Lambda::Permission
  #   Condition: isLambdaPermissionForRdsAndEc2
  #   Properties:
  #     FunctionName: !Ref ec2StartStopLambdaFunctionArn
  #     Action: 'lambda:InvokeFunction'
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt cwStartEventRule.Arn
  
  # cwEventRuleLambdaPermissionToStopEc2:
  #   Type: AWS::Lambda::Permission
  #   Condition: isLambdaPermissionForRdsAndEc2
  #   Properties:
  #     FunctionName: !Ref ec2StartStopLambdaFunctionArn
  #     Action: 'lambda:InvokeFunction'
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt cwStopEventRule.Arn

  customAlarmsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref updateInstanceIdLambdaFunctionArn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt updateInstanceIdCwEventRule.Arn

  ec2AmiStateChangeCwEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: CloudWatch event rule to check the state of AMI
      Name: !Ref ec2AmiStateChangeCwEventRuleName
      EventPattern:
        source:
          - !Ref ec2EventPatternSource
        detail-type:
          - !Ref amiStateChangeDetailType
        detail:
          State:
            - !Ref amiState
      State: !Ref ec2AmiStateChangeCwEventRuleState
      Targets:
        - Id: lambdaFuctionToUpdateAsgLaunchTemaplate
          Arn: !Ref asgLaunchTemplateLambdaFunctionArn
          InputTransformer:
            InputPathsMap:
              {"ImageId":"$.detail.ImageId"}
            InputTemplate: '{"ImageId": <ImageId>}'
  
  updateLaunchTemplateLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref asgLaunchTemplateLambdaFunctionArn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ec2AmiStateChangeCwEventRule.Arn
  
  # triggerScaleInAsgLambdaInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref triggerScaleInAsgLambdaFuncName
  #     Action: lambda:InvokeFunction
  #     Principal: sns.amazonaws.com
  #     SourceArn: !Ref snsTopicForTriggerScaleInAsgLambdaFuncArn

Outputs:
  # cwStartEventRuleArn:
  #   Condition: isEventRuleForRdsAndEc2
  #   Value: !GetAtt cwStartEventRule.Arn
  #   Export:
  #     Name: !Sub '${project}-${env}-cwStartEventRuleArn' 
  # cwStopEventRuleArn:
  #   Condition: isEventRuleForRdsAndEc2
  #   Value: !GetAtt cwStopEventRule.Arn
  #   Export:
  #     Name: !Sub '${project}-${env}-cwStopEventRuleArn'
  updateInstanceIdCwEventRule:
    Value: !GetAtt updateInstanceIdCwEventRule.Arn
    Export:
      Name: !Sub '${project}-${env}-updateInstanceIdCwEventRuleArn-${AWS::Region}'
  ec2AmiStateChangeCwEventRule:
    Value: !GetAtt ec2AmiStateChangeCwEventRule.Arn
    Export:
      Name: !Sub '${project}-${env}-ec2AmiStateChangeCwEventRuleArn-${AWS::Region}'