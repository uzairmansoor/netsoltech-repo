AWSTemplateFormatVersion: "2010-09-09"
Description: Driver Template to deploy the cloudwatch event rules
Parameters:
  project:
    Type: String
    Default: netsoltech
    Description:  Project Name
  env:
    Type: String
    Default: stage
    AllowedValues: [prod, dev, qa, stage]
    Description:  Environment Name
  s3ArtifactPath:
    Type: String
    Default: "https://netsoltech-stage-us-east-1-339713058918.s3.amazonaws.com/code/cfn/services"
    Description: "Artifact Bucket path"

Resources:
  cloudWatchEventRules:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/cw/eventRules/cloudWatchEventRules-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        autoScalingGroupName: !Sub "${project}-${env}-${app}-AutoScalingGroup"
        customAlarmsLambdaFunctionArn: !GetAtt lambdaFunctions.Outputs.customAlarmsLambdaFunctionArn
        customAlarmsCWEventRuleState: ENABLED
        eventPatternSource: aws.autoscaling
        eventPatternDetailType: EC2 Instance-launch Lifecycle Action
        ec2EventPatternSource: aws.ec2
        amiStateChangeDetailType: EC2 AMI State Change
        amiState: available
        ec2AmiStateChangeCwEventRuleState: ENABLED
        asgLaunchTemplateLambdaFunctionArn: !GetAtt lambdaFunctions.Outputs.asgLaunchTemplateLambdaFunctionArn
        triggerScaleInAsgLambdaFuncName: !GetAtt triggerScaleInAsgLambdaFunc.Outputs.lambdaFunctionName
        snsTopicForTriggerScaleInAsgLambdaFuncArn: !GetAtt snsTopicForTriggerScaleInAsgLambdaFunc.Outputs.snsTopicArn

Outputs:
  cloudWatchEventRules:
    Value: !Ref cloudWatchEventRules
    Export:
      Name: !Sub "${project}-${env}-${app}-cloudwatchEventRulesStack-${AWS::Region}"