AWSTemplateFormatVersion: "2010-09-09"
Description: Cloudformation template to create S3 buckets
Parameters:
  project:
    Type: String
    Default: netsoltech
    Description:  Project Name
  env:
    Type: String
    Default: stage
    AllowedValues: [prod, dev, qa, stage]
    Description:  Environment Name
  app:
    Type: String
    Default: app
    Description: Name of the app
  s3BucketName:
    Type: String
    Description: Name of s3 bucket
  s3BucketAccessControl:
    Type: String
    Default: Public
    AllowedValues: [Private, Public]
    Description:  The predefined permissions to the bucket
  s3VersioningStatus:
    Type: String
    Default: Enabled
    AllowedValues: [Enabled , Suspended]
    Description: Select Enabled to enable the S3 versioning status and Suspended to disable the S3 versioning status
  # websiteUrl:
  #   Type: String
  #   Default: https://netsolcloudservices.com
  #   Description:  The website URL where the contents of this bucket can be accessed
  # linkedinUrl:
  #   Type: String
  #   Default: https://linkedin.com
  #   Description:  The linkedin URL where the contents of this bucket can be accessed
  # keapUrl:
  #   Type: String
  #   Default: https://keap.app
  #   Description:  The keap URL where the contents of this bucket can be accessed
  # stagWebsiteUrl:
  #   Type: String
  #   Default: https://stag.netsolcloudservices.com
  #   Description:  The stag website URL where the contents of this bucket can be accessed
  # devWebsiteUrl:
  #   Type: String
  #   Default: https://dev.netsolcloudservices.com
  #   Description:  The dev website URL where the contents of this bucket can be accessed
  s3ObjectOwnership:
    Type: String
    Default: BucketOwnerPreferred
    AllowedValues: [BucketOwnerEnforced , ObjectWriter, BucketOwnerPreferred]
    Description: Object Ownership rule
  sseAlgorithm:
    Type: String
    Description: Server side encryption algortihm
  indexDocument:
    Type: String
    Description: Name of the index document for the website
  errorDocument:
    Type: String
    Description: Name of the error document for the website
  enableWebsiteConfiguration:
    Type: String
    Default: yes
    AllowedValues: [yes, no]
    Description: Enable website configuration or not
  enableCfWritePolicy:
    Type: String
    Default: yes
    AllowedValues: [yes, no]
    Description: Enable CloudFront write policy or not
  # enableS3BucketPolicy:
  #   Type: String
  #   Default: yes
  #   AllowedValues: [yes, no]
  #   Description: Enable S3 bucket policy for s3 media artifacts bucket or not
  enableAlbBucketPolicy:
    Type: String
    Default: yes
    AllowedValues: [yes, no]
    Description: Enable load balancer write policy or not

Conditions:
  isEnableCfWritePolicy: !Equals [!Ref enableCfWritePolicy, yes ]
  # isEnableS3BucketPolicy: !Equals [!Ref enableS3BucketPolicy, yes ]
  isEnableWebsiteConfiguration: !Equals [!Ref enableWebsiteConfiguration, yes ]
  isenableAlbBucketPolicy: !Equals [!Ref enableAlbBucketPolicy, yes ]

Resources:
  s3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${s3BucketName}"
      AccessControl: !Ref s3BucketAccessControl 
      WebsiteConfiguration: !If
        - isEnableWebsiteConfiguration
        - IndexDocument: !Ref indexDocument
          ErrorDocument: !Ref errorDocument
        - !Ref "AWS::NoValue"
      OwnershipControls:
        Rules:
          - ObjectOwnership: !Ref s3ObjectOwnership
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: !Ref sseAlgorithm
      VersioningConfiguration:
        Status: !Ref s3VersioningStatus
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Name
          Value: !Sub "${s3BucketName}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  
  # s3BucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Condition: isEnableS3BucketPolicy
  #   Properties:
  #     Bucket: !Ref s3Bucket
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal: "*"
  #           Action:
  #             - s3:PutAnalyticsConfiguration
  #             - s3:GetObjectVersionTagging
  #             - s3:GetObjectAcl
  #             - s3:GetBucketObjectLockConfiguration
  #             - s3:GetIntelligentTieringConfiguration
  #             - s3:PutLifecycleConfiguration
  #             - s3:GetObjectVersionAcl
  #             - s3:PutBucketAcl
  #             - s3:PutObjectTagging
  #             - s3:GetBucketPolicyStatus
  #             - s3:GetObjectRetention
  #             - s3:GetBucketWebsite
  #             - s3:PutReplicationConfiguration
  #             - s3:GetObjectAttributes
  #             - s3:PutObjectLegalHold
  #             - s3:GetObjectLegalHold
  #             - s3:GetBucketNotification
  #             - s3:PutBucketCORS
  #             - s3:GetReplicationConfiguration
  #             - s3:PutObject
  #             - s3:GetObject
  #             - s3:PutBucketNotification
  #             - s3:PutBucketLogging
  #             - s3:PutObjectVersionAcl
  #             - s3:GetAnalyticsConfiguration
  #             - s3:PutBucketObjectLockConfiguration
  #             - s3:GetObjectVersionForReplication
  #             - s3:GetLifecycleConfiguration
  #             - s3:GetInventoryConfiguration
  #             - s3:GetBucketTagging
  #             - s3:PutAccelerateConfiguration
  #             - s3:GetBucketLogging
  #             - s3:GetAccelerateConfiguration
  #             - s3:GetObjectVersionAttributes
  #             - s3:GetBucketPolicy
  #             - s3:PutEncryptionConfiguration
  #             - s3:GetEncryptionConfiguration
  #             - s3:GetObjectVersionTorrent
  #             - s3:PutBucketTagging
  #             - s3:GetBucketRequestPayment
  #             - s3:GetObjectTagging
  #             - s3:GetMetricsConfiguration
  #             - s3:GetBucketOwnershipControls
  #             - s3:PutBucketVersioning
  #             - s3:PutObjectAcl
  #             - s3:GetBucketPublicAccessBlock
  #             - s3:PutBucketPublicAccessBlock
  #             - s3:PutIntelligentTieringConfiguration
  #             - s3:PutMetricsConfiguration
  #             - s3:PutBucketOwnershipControls
  #             - s3:PutObjectVersionTagging
  #             - s3:GetBucketVersioning
  #             - s3:GetBucketAcl
  #             - s3:PutInventoryConfiguration
  #             - s3:GetObjectTorrent
  #             - s3:PutBucketWebsite
  #             - s3:PutBucketRequestPayment
  #             - s3:PutObjectRetention
  #             - s3:GetBucketCORS
  #             - s3:PutBucketPolicy
  #             - s3:GetBucketLocation
  #             - s3:GetObjectVersion
  #           Resource:
  #             - !GetAtt s3Bucket.Arn
  #             - !Sub "${s3Bucket.Arn}/*"
  #           Condition:
  #               StringLike:
  #                   aws:Referer:
  #                     - !Sub "${websiteUrl}/*"
  #                     - !Sub "${devWebsiteUrl}/*"
  #                     - !Sub "${stagWebsiteUrl}/*"
  #                     - !Sub "${linkedinUrl}/*"
  #                     - !Sub "${keapUrl}/*"

  writeAccessPolicyCloudFront:
    Type: AWS::S3::BucketPolicy
    Condition: isEnableCfWritePolicy
    Properties:
      Bucket: !Ref s3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: Allow cloud front to write logs to an s3 bucket
            Effect: Allow
            Action:
              - s3:GetBucketAcl
              - s3:PutObject
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource:
              - !Sub "arn:aws:s3:::${s3Bucket}"
              - !Sub "arn:aws:s3:::${s3Bucket}/*"

  writeAccessPolicyAlb:
    Type: AWS::S3::BucketPolicy
    Condition: isenableAlbBucketPolicy
    Properties:
      Bucket: !Ref s3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: Allow load balancer to write logs to an s3 bucket
            Effect: Allow
            Action:
              - s3:PutObject
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource:
              - !Sub "arn:aws:s3:::${s3Bucket}/*"
          - Sid: Allow load balancer to write logs to an s3 bucket
            Effect: Allow
            Action:
              - s3:PutObject
            Principal:
              AWS:
                - "*"
            Resource:
              - !Sub "arn:aws:s3:::${s3Bucket}/*"
          - Sid: Allow load balancer to write logs to an s3 bucket
            Effect: Allow
            Action:
              - s3:GetBucketAcl
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource:
              - !Sub "arn:aws:s3:::${s3Bucket}"

Outputs:
  s3Bucket:
    Value: !Ref s3Bucket
    Export:
      Name: !Sub "${project}-${env}-${app}-${s3BucketName}-${AWS::Region}"
  s3BucketArn:
    Value: !GetAtt s3Bucket.Arn
    Export:
      Name: !Sub "${project}-${env}-${app}-${s3BucketName}-Arn-${AWS::Region}"
  s3BucketDomainName:
    Value: !GetAtt s3Bucket.DomainName
    Export:
      Name: !Sub "${project}-${env}-${app}-${s3BucketName}-DomainName-${AWS::Region}"